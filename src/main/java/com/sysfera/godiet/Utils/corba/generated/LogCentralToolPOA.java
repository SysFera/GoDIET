
package com.sysfera.godiet.Utils.corba.generated;

/**
* LogCentralToolPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ./goDiet/Utils/CORBA/idl/LogTool.idl
* mercredi 26 janvier 2011 17 h 07 CET
*/


/**
 * methods offered by the core to allow tools to attach
 * and configure filters
 */
public abstract class LogCentralToolPOA extends org.omg.PortableServer.Servant
 implements LogCentralToolOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("test", new java.lang.Integer (0));
    _methods.put ("connectTool", new java.lang.Integer (1));
    _methods.put ("disconnectTool", new java.lang.Integer (2));
    _methods.put ("getDefinedTags", new java.lang.Integer (3));
    _methods.put ("getDefinedComponents", new java.lang.Integer (4));
    _methods.put ("addFilter", new java.lang.Integer (5));
    _methods.put ("removeFilter", new java.lang.Integer (6));
    _methods.put ("flushAllFilters", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
     * Do nothing but usefull to be sure that the object is reachable
     */
       case 0:  // LogCentralTool/test
       {
         this.test ();
         out = $rh.createReply();
         break;
       }


  /**
     * Connect a Tool with its toolName, which must be unique among all
     * tools. The return value indicates the success of the connection.
     * If ALREADYEXISTS is returned, the tool could not be attached, as
     * the specified toolName already exists. In this case the tool must
     * reconnect with another name before specifying any filters. If the 
     * tool sends an empty toolName, the LogCentral will provide a unique
     * toolName and pass it back to the tool.
     */
       case 1:  // LogCentralTool/connectTool
       {
         org.omg.CORBA.StringHolder toolName = new org.omg.CORBA.StringHolder ();
         toolName.value = in.read_string ();
         ToolMsgReceiver msgReceiver = ToolMsgReceiverHelper.read (in);
         short $result = (short)0;
         $result = this.connectTool (toolName, msgReceiver);
         out = $rh.createReply();
         out.write_short ($result);
         out.write_string (toolName.value);
         break;
       }


  /**
     * Disconnects a connected tool from the monitor. No further 
     * filterconfigurations should be sent after this call. The 
     * toolMsgReceiver will not be used by the monitor any more 
     * after this call. Returns NOTCONNECTED if the calling tool
     * was not connected.
     */
       case 2:  // LogCentralTool/disconnectTool
       {
         String toolName = in.read_string ();
         short $result = (short)0;
         $result = this.disconnectTool (toolName);
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }


  /**
     * Returns a list of possible tags. This is just a convenience
     * functions and returns the values that are specified in a
     * configuration file. If the file is not up to date, the 
     * application may generate more tags than defined in this
     * list.
     */
       case 3:  // LogCentralTool/getDefinedTags
       {
         String $result[] = null;
         $result = this.getDefinedTags ();
         out = $rh.createReply();
         tag_list_tHelper.write (out, $result);
         break;
       }


  /**
     * Returns a list of actually connected Components. This is just
     * a convenience function, as the whole state of the system will
     * be sent to the tool right after connection (in the form of
     * messages)
     */
       case 4:  // LogCentralTool/getDefinedComponents
       {
         String $result[] = null;
         $result = this.getDefinedComponents ();
         out = $rh.createReply();
         component_list_tHelper.write (out, $result);
         break;
       }


  /**
     * Create a filter for this tool on the monitor. Messages matching
     * this filter will be forwarded to the tool. The filter will be
     * identified by its name, which is a part of filter_t. A tool
     * can have as much filters as it wants. Returns ALREADYEXISTS if
     * another filter with this name is already registered.
     */
       case 5:  // LogCentralTool/addFilter
       {
         String toolName = in.read_string ();
         filter_t filter = filter_tHelper.read (in);
         short $result = (short)0;
         $result = this.addFilter (toolName, filter);
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }


  /**
     * Removes a existing filter from the tools filterList. The filter
     * will be identified by its name in the filter_t. If the specified
     * filter does not exist, NOTEXISTS is returned.
     */
       case 6:  // LogCentralTool/removeFilter
       {
         String toolName = in.read_string ();
         String filterName = in.read_string ();
         short $result = (short)0;
         $result = this.removeFilter (toolName, filterName);
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }


  /**
     * Removes all defined filters.
     */
       case 7:  // LogCentralTool/flushAllFilters
       {
         String toolName = in.read_string ();
         short $result = (short)0;
         $result = this.flushAllFilters (toolName);
         out = $rh.createReply();
         out.write_short ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:LogCentralTool:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public LogCentralTool _this() 
  {
    return LogCentralToolHelper.narrow(
    super._this_object());
  }

  public LogCentralTool _this(org.omg.CORBA.ORB orb) 
  {
    return LogCentralToolHelper.narrow(
    super._this_object(orb));
  }


} // class LogCentralToolPOA
