<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.sysfera.com" xmlns="http://www.sysfera.com"
	elementFormDefault="unqualified" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
	jaxb:version="2.0">







	<xs:complexType name="goDietConfiguration">
		<xs:sequence>
			<xs:element name="localscratch" type="scratch">
				<xs:annotation>
					<xs:documentation>Local goDiet directory on which it will save all
						configuration files</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="user" type="user" minOccurs="0" />
		</xs:sequence>
		<xs:attribute name="debug" type="xs:int" default="1" />
		<xs:attribute name="saveStdOut" type="xs:boolean"
			default="true" />
		<xs:attribute name="saveStdErr" type="xs:boolean"
			default="true" />
		<xs:attribute name="log" type="xs:boolean" />
		<xs:attribute name="localNode" type="xs:string" use="optional" />
		<xs:attribute name="watcherPeriod" type="xs:int" default="30000" />
	</xs:complexType>

	<xs:complexType name="user">
		<xs:annotation>
			<xs:documentation>GoDiet user description</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:sequence>
				<xs:element name="ssh" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="key" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Give keys to load in goDiet
									</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:annotation>
										<xs:documentation>Private key path. By default the public
											associated key 
										</xs:documentation>
									</xs:annotation>
									<xs:attribute name="path" type="xs:string" use="required" />
									<xs:attribute name="pathPub" type="xs:string" use="optional" />
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="infrastructure">
		<xs:annotation>
			<xs:documentation>Physical infrastructure description
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="domain" type="domain" maxOccurs="unbounded">
			</xs:element>
			<xs:sequence>
				<xs:element name="storage" type="storage" minOccurs="0"
					maxOccurs="unbounded" />
				<xs:element name="node" type="node" minOccurs="0"
					maxOccurs="unbounded" />
				<xs:element name="cluster" type="cluster" minOccurs="0"
					maxOccurs="unbounded" />
				<xs:element name="gateway" type="gateway" minOccurs="0"
					maxOccurs="unbounded" />
			</xs:sequence>
			<xs:element name="link" type="link" minOccurs="0"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="link">
		<xs:attribute name="from" type="xs:IDREF" use="required">
			<xs:annotation>
				<xs:appinfo>
					<jaxb:property>
						<jaxb:baseType name="Gateway" />
					</jaxb:property>
				</xs:appinfo>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="to" type="xs:IDREF" use="required">
			<xs:annotation>
				<xs:appinfo>
					<jaxb:property>
						<jaxb:baseType name="Gateway" />
					</jaxb:property>
				</xs:appinfo>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>


	<xs:complexType name="domain">
		<xs:annotation>
			<xs:documentation>Domain contains resources which could communicate
				each others (complete TCP/IP visibility). It could contain storage,
				node, cluster and gateway</xs:documentation>
		</xs:annotation>

		<xs:attribute name="label" type="xs:ID" />
	</xs:complexType>





	<xs:complexType name="fronted">
		<xs:complexContent>
			<xs:extension base="gateway"></xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="storage">
		<xs:annotation>
			<xs:documentation>Remote storage access. Typically to upload agent's
				configuration files.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="scratch" type="scratch" />
			<xs:element name="scp" type="ssh" />
		</xs:sequence>
		<xs:attribute name="label" type="xs:ID" use="required" />
	</xs:complexType>

	<xs:complexType name="scratch">
		<xs:attribute name="dir" type="xs:string" use="required" />
	</xs:complexType>

	<xs:complexType name="resource" abstract="true">
		<xs:annotation>
			<xs:documentation>Represent a physical resource on which you can run
				DietAgent</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ssh" type="ssh" maxOccurs="unbounded"/>
			<xs:element name="env" type="env" minOccurs="0" maxOccurs="1" />
			<xs:element name="endPoint" type="endPoint" minOccurs="0"
				maxOccurs="1" />
		</xs:sequence>
		<xs:attribute name="disk" type="xs:IDREF" use="required">
			<xs:annotation>
				<xs:appinfo>
					<jaxb:property>
						<jaxb:baseType name="Storage" />
					</jaxb:property>
				</xs:appinfo>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="id" type="xs:ID" use="required" />
	</xs:complexType>


	<xs:complexType name="gateway">
		<xs:complexContent>
			<xs:extension base="node" />
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="node">
		<xs:complexContent>
			<xs:extension base="resource" />
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="cluster">
		<xs:sequence>
			<xs:element name="computingNode" type="node" maxOccurs="unbounded" />
			<xs:element name="fronted" type="fronted" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Required. Node access to a cluster.
						could have
						more than 1 fronted. @see Gateway
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="cardinality" type="xs:int" use="required" />
		<xs:attribute name="label" type="xs:string" use="required" />
		<xs:attribute name="login" type="xs:string" use="optional" />
	</xs:complexType>



	<xs:complexType name="ssh">
		<xs:attribute name="domain" type="xs:string" use="required" />
		<xs:attribute name="server" type="xs:string" use="required" />
		<xs:attribute name="login" type="xs:string" use="required" />
		<xs:attribute name="port" type="portType" default="22"/>
		<xs:attribute name="id" type="xs:ID" />
		
	</xs:complexType>

	<xs:complexType name="env">
		<xs:sequence>
			<xs:element name="var" type="var" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="endPoint">
		<xs:attribute name="contact" type="xs:string" use="optional" />
		<xs:attribute name="startPort" type="xs:string" use="optional" />
		<xs:attribute name="endPort" type="xs:string" use="optional" />
	</xs:complexType>

	<xs:complexType name="var">
		<xs:attribute name="name" type="xs:string" use="required" />
		<xs:attribute name="value" type="xs:string" use="required" />
	</xs:complexType>


	<xs:complexType name="dietServices">
		<xs:sequence>
			<xs:element name="omniNames" type="omniNames" minOccurs="1"
				maxOccurs="unbounded" />
			<xs:element name="logCentral" type="logCentral" minOccurs="0"
				maxOccurs="1" />
			<xs:element name="logTool" type="logTool" minOccurs="0"
				maxOccurs="1" />

		</xs:sequence>
		<xs:attribute name="statistics" type="xs:boolean"
			default="false"></xs:attribute>
	</xs:complexType>



	<xs:complexType name="omniNames">
		<xs:annotation>
			<xs:documentation>
				The Omninames description. You need to have one
				OmniNames per domain 
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="software">
				<xs:attribute name="port" type="portType" use="optional"
					default="2809">
					<xs:annotation>
						<xs:documentation>Optional attribute. The omniNames listen port.
							By
							default 2809. </xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="logCentral">
		<xs:sequence>
			<xs:element name="config" type="config" />
		</xs:sequence>
		<xs:attribute name="connectDuringLaunch" type="xs:string"
			use="optional" />
	</xs:complexType>

	<xs:complexType name="logTool">
		<xs:sequence>
			<xs:element name="config" type="config" />
		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="dietInfrastructure">
		<xs:annotation>
			<xs:documentation>The root level of diet infrastructure description.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="masterAgent" type="masterAgent"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="software" abstract="true">
		<xs:annotation>
			<xs:documentation>Abstract representation of Diet agent.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="config" type="config" />
			<xs:element name="cfgOptions" type="options" minOccurs="0"
				maxOccurs="1" />
			<xs:sequence>
				<xs:element name="parameters" type="parameters"
					maxOccurs="unbounded" minOccurs="0" />
			</xs:sequence>
		</xs:sequence>
		<xs:attribute name="id" type="xs:ID" use="required" />
		<xs:attribute name="stats" type="xs:boolean" default="false" />
	</xs:complexType>


	<xs:complexType name="masterAgent">
		<xs:annotation>
			<xs:documentation>An MA receives computation requests from
				clients.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="software">
				<xs:sequence>
					<xs:element name="madag" type="maDag" minOccurs="0"
						maxOccurs="unbounded" />
					<xs:element name="localAgent" type="localAgent"
						minOccurs="0" maxOccurs="unbounded" />
					<xs:element name="sed" type="sed" minOccurs="0"
						maxOccurs="unbounded" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="maDag">
		<xs:complexContent>
			<xs:extension base="software">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="localAgent">
		<xs:annotation>
			<xs:documentation>An LA transmits requests and information
				between MAs
				and servers (sed).</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="software">
				<xs:sequence>
					<xs:element name="localAgent" type="localAgent"
						minOccurs="0" maxOccurs="unbounded" />
					<xs:element name="sed" type="sed" minOccurs="0"
						maxOccurs="unbounded" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="sed">
		<xs:annotation>
			<xs:documentation> A sed encapsulates a computational
				server. For
				instance it can be located on the entry point of a cluster
				(Fronted)
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="software">

			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="forwarders">
		<xs:sequence>
			<xs:element name="client" type="forwarder" />
			<xs:element name="server" type="forwarder" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="forwarder">
		<xs:annotation>
			<xs:documentation>A Diet Forwarder is a way to encapsulate all
				communication between two domains. You need to specify on which node
				(could be a gateway, fronted) you want to instantiate.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="software">

				<xs:attribute name="type">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="CLIENT" />
							<xs:enumeration value="SERVER" />
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>

			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--<xs:attribute> <xs:simpleType> <xs:restriction base="xs:string"> </xs:restriction> 
		</xs:simpleType> </xs:attribute> -->

	<xs:complexType name="config">
		<xs:attribute name="remoteBinary" type="xs:string" use="required" />
		<xs:attribute name="server" type="xs:string" use="required">
			<xs:annotation>
				<xs:appinfo>
					<jaxb:property>
						<jaxb:baseType name="Node" />
					</jaxb:property>
				</xs:appinfo>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="parameters">
		<xs:attribute name="string" type="xs:string" use="required" />
	</xs:complexType>


	<xs:complexType name="options">
		<xs:annotation>
			<xs:documentation>Ordered options used to configure agents
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="option" maxOccurs="unbounded">
				<xs:complexType>
					<xs:annotation>
						<xs:documentation>Decribe a key value option</xs:documentation>
					</xs:annotation>
					<xs:attribute name="key" type="xs:string" use="required" />
					<xs:attribute name="value" type="xs:string" use="required" />
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>




	<xs:simpleType name="portType">
		<xs:restriction base="xs:int">
			<xs:minInclusive value="0" />
			<xs:maxInclusive value="65535" />
		</xs:restriction>
	</xs:simpleType>
</xs:schema>