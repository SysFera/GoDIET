<?xml version="1.0" standalone="no"?>

<!DOCTYPE diet_configuration SYSTEM "../GoDIET.dtd">
<!-- GoDIET.dtd defines the semantics for input xml files for DIET.
     GoDIET uses a validating parser, so if your XML does not follow
     the rules specified in the dtd it will not be accepted by the
     parser. The comments below will help you write a valid XML for 
     GoDIET.  All sections are required unless marked "Optional" -->

<!-- The diet_configuration tags surround all of the other sections.
     diet_configuration can optionally contain:
       1 "goDiet" section: configure goDIET behavior
     and must contain each of the following:
       1 "resources" section: define storage and compute resources
       1 "diet_services" section: define omniNames, LogCentral, etc.
       1 "diet_hierarchy" section: define your agent hierarchy
-->
<diet_configuration>

  <!-- Optional: If desired, the goDiet section can be included to 
       allow configuration of goDIET behavior. -->
  <goDiet debug="1"
          saveStdOut="yes"
          saveStdErr="no"
          useUniqueDirs="yes"/>
        <!-- Optional: debug controls the verbosity of goDIET output from
                  0 (no debugging) -> 2 (very verbose) 
             Optional: saveStdOut controls whether stdout is redirected
                  to /dev/null or to a file in your remote scratch
                  space called <componentName>.out.
             Optional: saveStdErr as above with a file named 
                  <componentName>.err.
             Optional: for useUniqueDirs, yes specifies that a unique
                  subdirectory will be created under the scratch space
                  on each machine for all files relevant to the run.
                  If no, all files are written in the scratch directly.
          -->
   
  <!-- Use the resources section to define what machines you
       want to use for computation and storage, how to access those
       resources, and where to find binaries on each. You must include
       1 "scratch" section, at least 1 "storage" section, and at least
       1 "compute" or 1 "cluster" section. --> 
  <resources>
    <!-- Specify a local pathname GoDIET can use as scratch
         space (e.g. temp storage of config files). You must have write
         access to the directory. -->
    <scratch dir="/tmp/GoDIET_scratch"/>

    <!-- Define all storage space that will be needed to run 
         jobs on your compute hosts. -->
    <storage label="disk1">
        <scratch dir="/tmp/run_scratch"/>
        <scp server="hostX.site1.fr" login="<your login on this machine>"/>
          <!-- Optional: if login is not specified, the current login
               is used. -->
    </storage>
    <storage label="clusterX_disk">
        <scratch dir="/tmp/run_scratch"/>
        <scp server="hostX.clusterX.fr"/>
    </storage>

    <!-- Define all compute hosts that you want to use. -->
    <!-- Use "compute" tags for individual machines, "cluster" to 
         simplify description of large numbers of machines -->
    <compute label="host1" disk="disk1">
        <ssh server="host1.site1.fr" login="<your login>"/>
          <!-- Define hostname and login to be used for ssh access
               to machine.
               Optional: if login is not specified, the local login
               will be used. -->
        <env path="<bindir1>:<bindir2>:..."
             LD_LIBRARY_PATH="<libdir1>:<libdir2>:..."/>
             <!-- Optional: if you don't specify a path or
                  LD_LIBRARY_PATH, your default paths on the system will
                  be used. You can make the path shorter by putting
                  links to all your binaries in one directory on the
                  system. -->
        <end_point contact="192.5.59.198"/>
             <!-- Optional: for some networks, it is necessary to be
                  explicit about which IP to use to communicate with 
                  running components. -->
    </compute>
    <compute label="host2" disk="disk1">
        <ssh server="host2.site1.fr"/>
        <env path="<bindir1>:<bindir2>:..."
             LD_LIBRARY_PATH="<libdir1>:<libdir2>:..."/>
    </compute>

    <cluster label="clusterX" disk="clusterX_disk" login="<your login>"/>
        <env path="<bindir1>:<bindir2>:..."
             LD_LIBRARY_PATH="<libdir1>:<libdir2>:..."/>

        <node label="clusterX_host1" disk="clusterX_disk">
            <ssh server="host1.clusterX.fr"/>
            <end_point contact="192.5.80.103"/>
        </node>
        <node label="clusterX_host2" disk="clusterX_disk">
            <ssh server="host2.clusterX.fr"/>
        </node>
    </cluster>

  </resources>
 
  <!-- Define DIET services.  Must contain 1 "omni_names" section and
       can optionally include 1 "log_central" and 1 "log_tool"
       section.  Do not define "log_tool" without defining
       "log_central". -->
  <diet_services>

    <omni_names contact="<ip or hostname>" port="2810">
       <!-- Optional: If contact is given, it is used in omniORB4.cfg
            to help all other corba components find omniNames.  For example,
            if you have no DNS, you should put here the IP address. -->
       <!-- Optional: if port is undefined, port 2809 will be used. -->
        <config server="clusterX_host1" 
                trace_level="1" 
                remote_binary="omniNames"/>
            <!-- "server" must refer to the label of one of your
                      "compute" resources defined above.  GoDIET will
                      run this service on that host.
                 "trace_level" is optional.  Higher values provide more
                      debugging output from OmniNames.
                 "remote_binary" is the binary name to execute for the
                      service. -->
    </omni_names>

    <log_central connectDuringLaunch="no|yes">
       <!-- Optional: If connectDuringLaunch is set to no, GoDIET will launch
            LogCentral but will not try to use LogCentral feedback to guide
            the launch. -->
        <config server="clusterX_host2" 
                remote_binary="LogCentral"/>
    </log_central>
    <log_tool>
        <config server="clusterX_host2" 
                remote_binary="DIETLogTool"/>
    </log_tool>
  </diet_services>
 
  <!-- Define desired DIET agent and server hierarchy.  Must include at
       least 1 "master_agent" section; all other sections are optional.
       -->
  <diet_hierarchy>

    <!-- Define config for "master_agent". -->
    <master_agent label="MyMA">
      <!-- "label" is optional.  If defined, it is used as a prefix for
           an automatically generated name.  The system will name this
           agent "MyMA_0". -->
        <!-- See config explanation under "services" section -->
        <config server="host1"
                trace_level="1"
                remote_binary="<binary name for diet agent on this server>"/>

        <!-- See "master_agent" explanation above. This agent will be 
             named MyLA_0 -->
        <local_agent label="MyLA">
            <config server="host2"
                    trace_level="1"
                    remote_binary="dietAgent"/>
            
            <SeD label="MySeD">
                <config server="clusterX_host2"
                        remote_binary="<binary name for this diet SeD on this server>"/>
                <parameters string="T"/>
            </SeD>
        </local_agent>
        <SeD label="MySeD">
            <config server="clusterX_host1"
                    remote_binary="server"/>
            <parameters string="T"/>
        </SeD>
    </master_agent>
  </diet_hierarchy>      

</diet_configuration>
