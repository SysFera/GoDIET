%****************************************************************************%
%* DIET User's Manual deploying chapter file                                *%
%*                                                                          *%
%*  Author(s):                                                              *%
%*    - Holly DAIL (Holly.Dail@ens-lyon.fr)                                 *%
%*    - Raphael BOLZE (Raphael.Bolze@ens-lyon.fr)                           *%
%*    - Eddy CARON (Eddy Caron@ens-lyon.fr)                                 *%
%*    - Philippe COMBES (Philippe.Combes@ens-lyon.fr)                       *%
%*    - Benjamin DEPARDON (Benjamin.Depardon@ens-lyon.fr)                   *%
%*                                                                          *%
%* $LICENSE$                                                                *%
%****************************************************************************%
%* $Id: deploy.tex,v 1.27 2011/05/02 10:01:43 bdepardo Exp $
%* $Log: deploy.tex,v $
%* Revision 1.27  2011/05/02 10:01:43  bdepardo
%* Corrected a few typos.
%* Renamed "round-robin" scheduler into "least recently used" scheduler as this
%* is closer to the behavior of this scheduler.
%*
%* Revision 1.26  2010/09/19 10:35:46  bdepardo
%* Added a section on how to choose the shape of the hierarchy
%*
%* Revision 1.25  2010/03/29 21:18:17  ecaron
%* Update GoDIET commands
%*
%* Revision 1.24  2010/02/25 08:05:27  ycaniou
%* e.g -> Use macro
%* Typo + ispell
%*
%* Revision 1.23  2010/02/25 06:45:38  ycaniou
%* Add local variables
%*
%* Revision 1.22  2010/01/21 14:05:58  bdepardo
%* DIET -> \diet
%* SeD -> \sed
%* GoDIET -> \godiet
%*
%* Revision 1.21  2008/07/16 23:02:48  ecaron
%* Fixe the problem with too long list of hosts
%*
%* Revision 1.20  2008/03/04 16:12:37  bdepardo
%* Added a link to the file examples/commented.xml for GoDIET.
%*
%* Revision 1.19  2006/11/29 16:55:49  dloureir
%* minor corrections
%*
%* Revision 1.18  2006/05/12 12:12:32  sdahan
%* Add some documentation about multi-MA
%*
%* Bug fix:
%*  - segfault when the neighbours configuration line was empty
%*  - deadlock when a MA create a link on itself
%*
%* Revision 1.17  2005/07/13 07:56:15  hdail
%* Corrected error in xml example and added console instructions to GoDIET section.
%*
%* Revision 1.16  2005/07/12 21:44:28  hdail
%* - Correcting small problems throughout
%* - Modified deployment chapter to have a real section for deploying via GoDIET
%* - Adding short xml example without the comments to make a figure in GoDIET
%*   section.
%*
%* Revision 1.15  2005/06/28 15:53:02  hdail
%* Completed corrections for config file examples and text explaining launch of
%* each component.
%*
%* Revision 1.14  2005/06/28 13:57:55  hdail
%* Described GoDIET and updating section on launching by hand.
%*
%* Revision 1.13  2005/06/24 14:27:07  hdail
%* Correcting english problems & updating descriptions that are no longer true.
%*
%* Revision 1.12  2005/06/14 08:26:32  ecaron
%* Deployment section should introduce GoDIET (Fixme for Holly)
%*
%* Revision 1.11  2005/05/29 13:51:22  ycaniou
%* Moved the section concerning FAST from description to a new chapter about FAST
%* and performances prediction.
%* Moved the section about convertors in the FAST chapter.
%* Modified the small introduction in chapter 1.
%* The rest of the changes are purely in the format of .tex files.
%*
%* Revision 1.10  2004/10/25 08:59:56  sdahan
%* add the multi-MA documentation
%*
%* Revision 1.9  2004/09/28 07:03:39  rbolze
%* remove useAsyncAPI parameter
%*
%* Revision 1.8  2004/07/12 08:33:58  rbolze
%* explain how to copy cfgs file in install_dir/etc directory and correct my english
%****************************************************************************%

\chapter{Deploying a \diet platform}
\label{ch:deploying}

Deployment is the process of launching a \diet platform including agents and
servers.  For \diet, this process includes writing configuration files for each
element and launching the elements in the correct hierarchical order. There are
three primary ways to deploy \diet.

Launching \textbf{by hand} is a reasonable way to deploy \diet for small-scale
testing and verification. This chapter explains the  necessary services, how to
write \diet configuration files, and in what order \diet elements should be
launched.  See Section~\ref{sec:deployBasics} for details.

\textbf{\godiet} is a Java-based tool for automatic \diet deployment that
manages configuration file creation, staging of files, launch of elements,
monitoring and reporting on launch success, and process cleanup when the \diet
deployment is no longer needed.   See  Section~\ref{sec:deployGoDIET} for
details.

\textbf{Writing your own scripts} is a surprisingly popular approach.  This
approach often looks easy initially, but can sometimes take much, much longer
than you predict as there are many complexities to manage.  Learn \godiet -- it
will save you time!




\section{\godiet}
\label{sec:deployGoDIET}

%%Description
\godiet is an cross-platform tool that helps you automate ad-hoc deployment and
management procedures for \diet infrastructure. It manages
configuration file creation, staging of files, launch of software components, monitoring and reporting.  \godiet is extremely useful for large deployments on a complex physical infrastructure. The mains features are:
\begin{itemize}
  \item complete command line interface;
  \item distributed command execution via SSH;
  \item real time monitoring applications state;
  \item complex physical infrastructure management with firewall and multiple
    network lan.
\end{itemize}
\begin{figure}[h]
  \centering
  \includegraphics[width=10cm]{fig/schemaPhilippe}
  \caption{Design principle of \godiet.\label{fig:GODIETDesign}}
\end{figure}


\subsection{Installing \godiet}

The following operating systems are known to support GoDiet:
\begin{itemize}
    \item Linux: most recent distributions are likely to work;
    \item Mac OS X 10.4 or later.
\end{itemize}

You need to have the Sun Java 6 or OpenJDK6 installed.
Download \godiet on the project website\footnote{http://graal.ens-lyon.fr/DIET/godiet.html}.
Check that run.sh script works. You must have something on the figure\ref{fig:GODIETShell}

% This platform must be describe in a XML file based on \textit{Platform.xsd} grammar. You can find an simple file in the example directory 

\subsection{Quickstart}
The four steps for hurry people
\begin{itemize}
\item create your \godiet configuration file in \verb+${HOME}/.godiet/configuration.xml+\ref{GODIETConfiguration}. It contains remote connection informations;
\item create your infrastructure description file\ref{GODIETInfrastructureDescription}. It describes your computes nodes, gateways and storages;
\item create your \diet platform description file\ref{GODIETPlatformDesc}. It describes all the \diet elements (agents and seds) that you want to deploy and manage;
\item Run \godiet shell\ref{GODIET}.
\end{itemize}

That's all folks!

\subsection{\godiet setup}

Before using \godiet, you need to create three files: one to describe \godiet configuration, one which describe your infrastructure and one which contains your \diet description.
This files uses an XML-format that each conforms repectively to the  Configuration.xsd, Infrastructure.xsd and Diet.xsd grammar (provide with \godiet). 
Sample files are provided in the \verb+examples+ directory. 

\subsubsection{Configuration}
\label{GODIETConfiguration}

This file aggregate informations about the local node from where \godiet is launch. It contains information about user authentification too.
\godiet looks in the \verb+${HOME}/.godiet/configuration.xml+ directory by default.

\vspace{1cm}
The mains elements are:
\begin{itemize}
\item \textbf{localNode}: the node's name from godiet host. This name must be present the infrastructure description; 
\item \textbf{localscratch}: The working directory where \godiet store his own temporary files;
\item \textbf{keys}: The paths of yours private ssh keys  which are loaded at \godiet startup. You can give the public key path too. \godiet try to load a file with the same name than the private key ended by \verb+.pub+.
 See \verb+ssh initkeys+ command\ref{GODIETSSHCommand} to initialize passwords if your keys are encrypted (i.e need a passphrase).
\end{itemize}

\vspace{1cm}
General configuration description layout (some parts are omitted):
\begin{verbatim}
<configuration schema="Configuration.xsd">
<goDietConfiguration localNode="local">
<localscratch dir="/tmp/scratch_godiet" />
  <user>
     <ssh>
       <key path="/home/.ssh/id_dsa"/>
       <key path="/home/.ssh/admin_cluster2"/>
     </ssh>
  </user>
</goDietConfiguration>
\end{verbatim}

\subsubsection{Infrastructure}
\label{GODIETInfrastructureDescription}

\godiet needs to have the description of infrastructure  \diet will be running. 

\vspace{1cm}
You can find full options list in \verb+Infrastructure.xsd+ grammar file. You can look in the \verb+examples+ directory too.
The most important fields are:
\begin{itemize}
\item \textbf{Domain}: aggregate a set of infrastructure elements (nodes, gateways, storages) which are be able to communicate with \diet's exchange protocol (i.e CORBA). Typically elements separated with firewall and/or a router  must be describe in separate domains.
\item \textbf{Storage}: Describe a remote disk access.
\item \textbf{Node}: Decribe a computing node where agents or seds will be running
\item \textbf{Gateway}: Describe an access point for a domain. The link or  Elle permette de créer les interconnections entre les différents domaines.
\item \textbf{Link}: Définit un lien directionel par lequel deux passerelles pourront communiquer grâce au protocole SSH.
\end{itemize}

\vspace{1cm}

General infrastructure description layout (details are omitted):
\begin{verbatim}
<infrastructure schema="Infrastructure.xsd">
 <domain id="idDomain1">
 ..
    <storage id="idStorage">..</storage>
    <node id="idNode" storageRefId="idStorage">..</node>
    <gateway id="idGateway1">..</gateway>

 </domain id="idDomain2">
 ..
   <gateway id="idGateway2"/>
 ..
 </domain>
 <link from="idGateway1" to="idGateway2"/>
</infrastructure>
\end{verbatim}


\begin{figure}[h]
  \centering
  \includegraphics[width=15cm]{fig/godiet-infrastructure}
  \caption{Three domains infrastructure representation example\label{fig:GODIETInfrastructure}}
\end{figure}

\subsubsection{Diet platform}
\label{GODIETPlatformDesc}

The user of \godiet could describes the desired deployment in an XML file including all needed external services (\eg omniNames and LogService); the desired hierarchical organization of agents and servers is directly using the hierarchical organization of XML. 

\begin{itemize}
\item \textbf{}
\item \textbf{}
\item \textbf{}
\end{itemize}



\subsection{Godiet shell}
\label{GODIETShell}

\godiet shell is the interface to manage your \diet platform. It includes facilities features like syntax highlighting, command completions and history commands. After executing run script you will have a prompt like on the figure \ref{fig:GODIETShell}

\begin{figure}[h]
  \centering
  \includegraphics[width=12cm]{fig/1-startup}
  \caption{\godiet shell startup.\label{fig:GODIETShell}}
\end{figure}


\subsubsection{Help command}


\begin{figure}[h]
  \centering
  \includegraphics[width=12cm]{fig/2-helpcommand}
  \caption{The help command.\label{fig:GODIETHelp}}
\end{figure}

\subsubsection{SSH command}
\label{GODIETSSHCommand}
\begin{itemize}
\item \textbf{initpasswords}: Allow you to intialize ssh key's passphrase loaded from configuration file;
\item \textbf{addkey}: Register a new key;
\item \textbf{modifykey n}: Modify a key that already registred;
\item \textbf{status}: Display the keys status. Could be PASSWORDNOTSET,PRIVATEKEYERROR,PUBKEYERROR or LOADED. 

\end{itemize}

\subsubsection{Load commands}

\verb+loadInfrastructure+ command to load an infrastructure description\ref{GODIETInfrastructureDescription}
\verb+loadDiet+ command se to load an \ref{GODIETInfrastructureDescription}


calcule et création automatique des Forwarders


\subsubsection{Start \& Stop commands}
\label{GODIETCommandStartStop}


\verb+start+ command 
Start command options:
\begin{itemize}
\item \textbf{software} name: Start one software given his name.
\item \textbf{services}: Start all services
\item \textbf{agents}:  Start all agents
\item \textbf{seds}: Start all seds
\item \textbf{all}: Start all softwares components
\end{itemize}

\vspace{0.5cm}

\verb+stop+ command have same parameters.


\subsubsection{Status command}
Status command options:
\begin{itemize}
\item \textbf{ma}: Display the masters agents status
\item \textbf{la}:  Display the locals agents status
\item \textbf{seds}: Display the servers daemons status
\item \textbf{all}: Display all diet softwares status
\end{itemize}

La commande status affiche sous forme de tableau l'état des éléments gérés pas  \godiet. Un exemple d'execution est affiché sur la figure \ref{fig:GODIETStatus}.
De gauche à droite les informations affichés sont: 
\begin{itemize}
\item Le nom du logiciel comme décrit dans le fichier de description d'infrastructure.
\item Son état et depuis  quand il s'y trouve.
\item La machine sur laquelle le logiciel va être executé ou est actuellement executé (selon son état).
\item Le message d'information dans le cas où la ressource est dans l'état erreur.
\end{itemize} 

\vspace{1cm}
Les différents états possibles sont
\begin{itemize}
\item \textbf{Incubate}: The component is correctly loaded in \godiet.
\item \textbf{Ready}: The configurations file are created in the local scratch directory and component is ready to start.
\item \textbf{Up}: The component is Up. His state is periodically checked.
\item \textbf{Down}: The componenent is Down. Typically if \godiet user call stop on this component.
\item \textbf{Error}:  Could appears if there is an error in the description, if the  
\end{itemize}

\begin{figure}[h]
  \centering
  \includegraphics[width=12cm]{fig/6-StatusWithErrUpIncubate}
  \caption{The 'status all' command.\label{fig:GODIETStatus}}
\end{figure}



%% \subsubsection{Draw command}
%% Draw command options:
%% \begin{itemize}
%%   \item \textbf{infrastructure}: Draw the infrastructure
%%   \item \textbf{platform}: Draw the platform infrastructure
%% \end{itemize}
%% Génère un fichier au format Dot. La figure\ref{fig:GODIETInfrastructure} est le résultat de son éxecution sur l'infrastructure décrite dans le fichier \verb+godiet-infrastructure.xml+

\subsubsection{Debugging \& Gestion des erreurs}
parler des fichiers de log et des messages d'erreurs.
% An example input XML file is shown in Figure~\ref{fig:godietXml}; see
%% \cite{CDa05} for a full explanation of all entries in the XML. You can also
%% have a look at the fully commented XML example file provided in the \godiet
%% distribution under examples/commented.xml, each option is explained. To launch
%% \godiet for the simple example XML file provided in the \godiet distribution
%% under examples/example1.xml, run:

%% \begin{verbatim}
%% ~ > java -jar GoDIET-x.x.x.jar example1.xml
%% XmlScanner constructor
%% Parsing xml file: example1.xml
%% GoDIET>
%% \end{verbatim}

%% \godiet reads the XML file and then enters an interactive console mode. In this
%% mode you have a number of options:

%% %% \begin{verbatim}
%% %% GoDIET> help
%% %% The following commands are available:
%% %%    launch:       launch entire DIET platform
%% %%    launch_check: launch entire DIET platform then check its status
%% %%    relaunch:     kill the current platform and launch entire DIET platform once again
%% %%    stop:         kill entire DIET platform using kill pid
%% %%    status:       print run status of each DIET component
%% %%    history:      print history of commands executed
%% %%    help:         print this message
%% %%    check:        check the platform status
%% %%    stop_check:   stop the platform status then check its status before exit
%% %%    exit:         exit GoDIET, do not change running platform.
%% %% \end{verbatim}

%% We will now launch this example; note that this example is intentionally very
%% simple with all components running locally to provide initial familiarity with
%% the \godiet run procedure. Deployment with \godiet is especially useful  when
%% launching components on multiple remote machines.

%% \begin{verbatim}
%% GoDIET> launch
%% * Launching DIET platform at Wed Jul 13 09:57:03 CEST 2005

%% Local scratch directory ready:
%%         /home/hdail/tmp/scratch_godiet

%% ** Launching element OmniNames on localHost
%% Writing config file omniORB4.cfg
%% Staging file omniORB4.cfg to localDisk
%% Executing element OmniNames on resource localHost
%% Waiting for 3 seconds after service launch

%% ** Launching element MA_0 on localHost
%% Writing config file MA_0.cfg
%% Staging file MA_0.cfg to localDisk
%% Executing element MA_0 on resource localHost
%% Waiting for 2 seconds after launch without log service feedback

%% ** Launching element LA_0 on localHost
%% Writing config file LA_0.cfg
%% Staging file LA_0.cfg to localDisk
%% Executing element LA_0 on resource localHost
%% Waiting for 2 seconds after launch without log service feedback

%% ** Launching element SeD_0 on localHost
%% Writing config file SeD_0.cfg
%% Staging file SeD_0.cfg to localDisk
%% Executing element SeD_0 on resource localHost
%% Waiting for 2 seconds after launch without log service feedback
%% * DIET launch done at Wed Jul 13 09:57:14 CEST 2005 [time= 11.0 sec]
%% \end{verbatim}

%% The \texttt{status} command will print out the run-time status of all launched
%% components. The \texttt{LaunchState} reports whether \godiet observed any
%% errors during the launch itself. When the user requests the launch of
%% LogService in the input XML file, \godiet can connect to the LogService  after
%% launching it to obtain the state of launched components; when available, this
%% state is reported in the \texttt{LogState} column.

%% \begin{verbatim}
%% GoDIET> status
%% Status   Element   LaunchState   LogState   Resource     PID
%%          OmniNames running       none       localHost    1232
%%          MA_0      running       none       localHost    1262
%%          LA_0      running       none       localHost    1296
%%          SeD_0     running       none       localHost    1329
%% \end{verbatim}

%% Finally, when you are done with your \diet deployment you should always run
%% \texttt{stop}. To clean-up each element, \godiet runs a \texttt{kill} operation
%% on the appropriate host using the stored PID of that element.

%% \begin{verbatim}
%% GoDIET> stop

%% * Stopping DIET platform at Wed Jul 13 10:05:42 CEST 2005
%% Trying to stop element SeD_0
%% Trying to stop element LA_0
%% Trying to stop element MA_0
%% Trying to stop element OmniNames

%% * DIET platform stopped at Wed Jul 13 10:05:43 CEST 2005[time= 0.0 sec]
%% * Exiting GoDIET. Bye.
%% \end{verbatim}

%% \begin{figure}[p]
%% \input{xml_example.tex}.
%% \caption{Example XML input file for \godiet.\label{fig:godietXml}}
%% \end{figure}

%% One of the main problem when writing a \godiet XML input file is to be compliant
%% with the dtd. A good tool to validate a \godiet file before using \godiet is
%% \textbf{xmllint}. This tool exist on most platforms and with the following
%% command:
%% \begin{verbatim}
%% $ xmllint your_xml_file --dtdvalid path_to_GoDIET.dtd -noout
%% \end{verbatim}
%% you will see the different lines where there is problem and a clear description
%% of why your XML file is not compliant.

\clearpage
